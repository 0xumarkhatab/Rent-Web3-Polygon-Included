import { parseEther } from "ethers/lib/utils";
import { getProviderOrSigner } from "./accountsConnection";
import {getNetworkTronweb } from "./TronAccountsManagement";
import {
  getCustomNetworkWebsiteRentContract,
  getTronWebsiteRentContract,
} from "./WebsiteRent";
export const SaleABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "whitelistContractAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "string",
        name: "_baseURI",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_presaleMintRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_publicMintRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_openingTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_closingTime",
        type: "uint256",
      },
    ],
    name: "TimedCrowdsale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseExtension",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checkStage",
    outputs: [
      {
        internalType: "enum Sale.Stage",
        name: "stage",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "endTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getNFTPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "xyz",
        type: "address",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "presaleMintRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "publicMintRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "purchaseThisToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
    ],
    name: "setMINTING_FEE_FRACTION",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setNFTPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newBeneficiary",
        type: "address",
      },
    ],
    name: "setPLATFORM_BENEFICIARY",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];
export const SaleBytecode = {
  object:
    "",
};
export const SaleTrackerABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "saleAddress",
        type: "address",
      },
    ],
    name: "addUserSale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "totalSales",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userNumberOfSales",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userToSale",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];
export const SaleTrackerBytecode = {
  object:
    "608060405234801561001057600080fd5b506040516105f53803806105f58339818101604052810190610032919061008e565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610109565b600081519050610088816100f2565b92915050565b6000602082840312156100a4576100a36100ed565b5b60006100b284828501610079565b91505092915050565b60006100c6826100cd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100fb816100bb565b811461010657600080fd5b50565b6104dd806101186000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636605ff6614610051578063ed0bd6681461006f578063edd117061461009f578063f6fec657146100cf575b600080fd5b6100596100eb565b6040516100669190610398565b60405180910390f35b6100896004803603810190610084919061031f565b6100f1565b604051610096919061037d565b60405180910390f35b6100b960048036038101906100b491906102b2565b61013f565b6040516100c69190610398565b60405180910390f35b6100e960048036038101906100e491906102df565b610157565b005b60035481565b6000602052816000526040600020818154811061010d57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b60018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546101a291906103b3565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008135905061029781610479565b92915050565b6000813590506102ac81610490565b92915050565b6000602082840312156102c8576102c7610474565b5b60006102d684828501610288565b91505092915050565b600080604083850312156102f6576102f5610474565b5b600061030485828601610288565b925050602061031585828601610288565b9150509250929050565b6000806040838503121561033657610335610474565b5b600061034485828601610288565b92505060206103558582860161029d565b9150509250929050565b61036881610409565b82525050565b6103778161043b565b82525050565b6000602082019050610392600083018461035f565b92915050565b60006020820190506103ad600083018461036e565b92915050565b60006103be8261043b565b91506103c98361043b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156103fe576103fd610445565b5b828201905092915050565b60006104148261041b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61048281610409565b811461048d57600080fd5b50565b6104998161043b565b81146104a457600080fd5b5056fea2646970667358221220b77a2195515108f416f291152666a3bd936a1eda2e533fad98a46d344e16e84164736f6c63430008070033",
};

// Ethereum
// Goerli Network Deployed Address
export const SaleTrackerAddress = "0x2A22Bf734Aa8250A320B63F56441e52b2F904A32";

// Tron
// Nile

export const SaleTrackerNileAddress = "TMN4Xc2XUVi4TmiiL7FzwTrYDh1JL7QWA6";

// Shasta
export const SaleTrackerShastaAddress = null;
//

// Polygon

const ethers = require("ethers");

// const provider = ethers.providers.getDefaultProvider(
//   'wss://little-quaint-liquid.ethereum-goerli.discover.quiknode.pro/b2367619fda52ade145960cc52e5bd23015b30ae/',
// )
// const privateKey =
//   'd09eb95eabc1d6e02595e40aa8899a58e78d616e8618752a492a72df1f0f49d1'
// const wallet = new ethers.Wallet(privateKey, provider)
// export const SaleTrackerContract = new ethers.Contract(
//   SaleTrackerAddress,
//   SaleTrackerABI,
//   wallet,
// )

async function getBlockchainSpecificWebsiteRentContract(
  Blockchain,
  NetworkChain,
  web3modalRef
) {
  let websiteRentContract = null;
  if (Blockchain == "tron") {
    websiteRentContract = await getTronWebsiteRentContract(NetworkChain);
  } else if (!Blockchain || Blockchain == "ethereum") {
    websiteRentContract = await getCustomNetworkWebsiteRentContract(
      NetworkChain,
      web3modalRef
    );
  } else if (Blockchain == "polygon") {
    //to be implemented yet
  }
  return websiteRentContract;
}
async function getBlockchainSpecificSaleTrackerContract(
  Blockchain,
  NetworkChain,
  web3modalRef
) {
  let contract = null;
  if (Blockchain == "tron") {
    contract = await getTronSaleTrackerContract(NetworkChain);
    // console.log("want to return Sale Tracker contract ", contract);
    return contract;
  } else if (!Blockchain || Blockchain == "ethereum") {
    contract = await getCustomNetworkSaleTrackerContract(
      NetworkChain,
      web3modalRef
    );
    return contract;
  } else if (Blockchain == "polygon") {
    //to be implemented yet
    return WhitelistTracker;
  } else {
    return null;
  }
}
async function getBlockchainSpecificSaleFactoryContract(
  Blockchain,
  NetworkChain,
  web3modalRef,
  contractAddress
) {
  let contract = null;
  if (Blockchain == "tron") {
    contract = await getTronSaleFactory(NetworkChain, contractAddress);
    // console.log("want to return whitelistTracker ", contract);
    return contract;
  } else if (!Blockchain || Blockchain == "ethereum") {
    contract = await getCustomNetworkSaleContract(
      NetworkChain,
      web3modalRef,
      contractAddress
    );
    return contract;
  } else if (Blockchain == "polygon") {
    //to be implemented yet
    return contract;
  } else {
    return null;
  }
  return contract;
}

export const fetchSaleAddresses = async (
  contract,
  owner,
  setter,
  Blockchain
) => {
  let TrackerContract = contract;
  try {
    // console.log("getting sales for", owner, "in", TrackerContract);

    if (Blockchain == "tron") {
      let numSales = await TrackerContract.userNumberOfSales(owner).call();
      let allSales = [];
      // console.log("Owner has ", numSales, " Sales");
      for (let index = 0; index < numSales; index++) {
        let SaleAddress = await TrackerContract.userToSale(owner, index).call();
        allSales.push(SaleAddress);
      }
      if (setter != undefined) {
        setter(allSales);
      }

      return allSales;
    } else if (!Blockchain || Blockchain == "ethereum") {
      return await TrackerContract.userNumberOfSales(owner).then(
        async (numSales) => {
          let allSales = [];
          //   console.log("Owner has ", numSales, " Sales");
          for (let index = 0; index < numSales; index++) {
            let SaleAddress = await TrackerContract.userToSale(owner, index);
            allSales.push(SaleAddress);
          }
          if (setter != undefined) {
            setter(allSales);
          }

          return allSales;
        }
      );
    }
  } catch (e) {
    console.log("unable to get sale addresses", e);
  }
  // let totalSales = await TrackerContract.totalSales();
};
export const fetchSales = async (
  NetworkChain,
  web3modalRef,
  owner,
  arraySetter,
  Blockchain
) => {
  // console.log("obtaining Sales for ", owner);
  let websiteRentContract = await getBlockchainSpecificWebsiteRentContract(
    Blockchain,
    NetworkChain,
    web3modalRef
  );
  let TrackerContract = await getBlockchainSpecificSaleTrackerContract(
    Blockchain,
    NetworkChain,
    web3modalRef
  );
  try {
    // console.log('fetching array of sales')
    await fetchSaleAddresses(
      TrackerContract,
      owner,
      arraySetter,
      Blockchain
    ).then(async (Sales) => {
      let allSales = [];
      // console.log("Sales obtained are ", Sales);
      // console.log('iterating over')
      Sales?.map(async (_Sale, index) => {
        let hostedWebsite;
        let rentTime;
        if (Blockchain == "tron") {
          hostedWebsite = await websiteRentContract
            .deploymentToWebsite(_Sale)
            .call();
          rentTime = await websiteRentContract.rentTime(hostedWebsite).call();
        } else if (!Blockchain || Blockchain == "ethereum") {
          rentTime = await websiteRentContract.rentTime(hostedWebsite);
          hostedWebsite = await websiteRentContract.deploymentToWebsite(_Sale);
        } else if (Blockchain == "polygon") {
          // polygon pull
        } else {
          // no support
        }

        hostedWebsite =
          rentTime * 1000 > new Date().getTime() ? hostedWebsite : null;

        let SaleContract = await getBlockchainSpecificSaleFactoryContract(
          Blockchain,
          NetworkChain,
          web3modalRef,
          _Sale
        );
        // console.log("sale contract is ", SaleContract);
        let name, symbol, baseURI, startTime, endTime;
        if (Blockchain == "tron") {
          name = await SaleContract.name().call();
          symbol = await SaleContract.symbol().call();
          baseURI = await SaleContract.baseURI().call();
          startTime = await SaleContract.startTime().call();
          endTime = await SaleContract.endTime().call();
        } else if (!Blockchain || Blockchain == "ethereum") {
          name = await SaleContract.name();
          symbol = await SaleContract.symbol();
          baseURI = await SaleContract.baseURI();
          startTime = await SaleContract.startTime();
          endTime = await SaleContract.endTime();
        } else if (Blockchain == "polygon") {
          //
        } else {
          return null;
        }

        let SaleInstance = {
          id: index + 1,
          name,
          symbol,
          baseURI,
          address: _Sale,
          website: hostedWebsite === "" ? null : hostedWebsite,
          startTime,
          endTime,
          owner,
          rentTime: rentTime * 1000,
        };
        // console.log("Sale instance", SaleInstance);
        allSales.push(SaleInstance);
        if (index + 1 == Sales.length) {
          if (arraySetter != undefined) {
            arraySetter(allSales);
          }
        }
        return allSales;
      });
    });
  } catch (e) {
    console.log("unable to fetch deploymments");
  }
};
export const getCustomNetworkSaleContract = async (
  network,
  web3modalRef,
  contractAddress
) => {
  let signer = await getProviderOrSigner(network, web3modalRef, true);
  let SaleContract = new ethers.ContractFactory(
    SaleABI,
    SaleBytecode.object,
    signer
  );
  if (contractAddress) {
    SaleContract = new ethers.Contract(contractAddress, SaleABI, signer);
  }
  return SaleContract;
};

export const getCustomNetworkSaleTrackerContract = async (
  network,
  web3modalRef
) => {
  let signer = await getProviderOrSigner(network, web3modalRef, true);
  const SaleTrackerContract = new ethers.Contract(
    SaleTrackerAddress,
    SaleTrackerABI,
    signer
  );

  return SaleTrackerContract;
};
export const getTronSaleTrackerContract = async (network) => {
  let contractAddress = null;
  if (network == "nile") {
    contractAddress = SaleTrackerNileAddress;
  }
  let tronWeb = await getNetworkTronweb(network);
  let contract = await tronWeb.contract().at(contractAddress);
  // console.log("sale tracker is ", contract);
  return contract;
};
export const getTronSaleFactory = async (network, contractAddress) => {
  let tronWeb = await getNetworkTronweb(network);
  let contract = await tronWeb.contract().at(contractAddress);
  return contract;
};